""" REFERENCE
" https://github.com/junegunn/vim-plug/wiki/tips
" https://github.com/skywind3000/vim-init
" https://github.com/wklken/k-vim
" https://github.com/amix/vimrc
" https://gitee.com/mirrorvim/vim-fast/blob/master/vimrc-no-plug
" https://github.com/chenxuan520/vim-fast

""" OPTION
filetype on
filetype plugin on
filetype indent on
syntax enable
syntax on
set autoread
set backspace=indent,eol,start
set ruler
set number
set relativenumber
set cursorline
set cursorcolumn
set colorcolumn=80
set splitbelow
set splitright
set clipboard^=unnamed,unnamedplus
set nowrap
set showtabline=2
set laststatus=2
set wildmenu
set autoindent
set cindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab
set hlsearch
set incsearch
set ignorecase
set smartcase
set nobackup
set noswapfile
set notermguicolors
set background=dark
let g:vim_indent_cont=&sw

""" KEYBINDING
let mapleader='\'
let maplocalleader=' '
nnoremap <leader>CE <cmd>edit $MYVIMRC<cr>
nnoremap <leader>CR <cmd>source $MYVIMRC<cr>
inoremap jk <esc>
vnoremap jk <esc>
cnoremap jk <c-c>

""" DISABLE BUILTIN PLUGIN
let g:loaded_getscriptPlugin=1
let g:loaded_gzip=1
let g:loaded_logiPat=1
let g:loaded_manpager=1
let g:loaded_matchit=1
let g:loaded_matchparen=1
let g:loaded_netrwPlugin=1
let g:loaded_rrhelper=1
let g:loaded_spellfile=1
let g:loaded_tarPlugin=1
let g:loaded_tohtml=1
let g:loaded_vimballPlugin=1
let g:loaded_zipPlugin=1

""" AUTOCMD
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line('$') | exe "normal! g'\"" | endif
autocmd BufEnter * setlocal formatoptions-=r formatoptions-=c formatoptions-=o
autocmd BufWinEnter * if getfsize(expand('%')) > 1048576 | syntax clear | endif
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType help noremap <buffer> q :bd<CR>

""" VIM-PLUG
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd BufWinEnter * PlugInstall --sync | source $MYVIMRC
endif
autocmd BufWinEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) > 0 | PlugInstall --sync | source $MYVIMRC | endif
call plug#begin()
Plug 'sheerun/vim-polyglot', { 'on': [] }
Plug 'ryanoasis/vim-devicons', { 'on': [] }
Plug 'morhetz/gruvbox', { 'on': [] }
Plug 'vim-airline/vim-airline', { 'on': [] }
Plug 'andymass/vim-matchup', { 'on': [] }
Plug 'Yggdroot/indentLine', { 'on': [] }
Plug 'LunarWatcher/auto-pairs', { 'on': [] }
Plug 'luochen1990/rainbow', { 'on': [] }
Plug 'tpope/vim-commentary', { 'on': [] }
Plug 'machakann/vim-highlightedyank', { 'on': [] }
Plug 'ntpeters/vim-better-whitespace', { 'on': [] }
Plug 'airblade/vim-gitgutter', { 'on': [] }
Plug 'wellle/context.vim', { 'on': [] }
Plug 'dense-analysis/ale', { 'on': [] }
Plug 'justinmk/vim-sneak', { 'on': [] }
Plug 'tpope/vim-surround', { 'on': [] }
Plug 'ap/vim-css-color', { 'on': [] }
Plug 'prabirshrestha/asyncomplete.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-buffer.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-file.vim', { 'on': [] }
Plug 'prabirshrestha/asyncomplete-lsp.vim', { 'on': [] }
Plug 'prabirshrestha/vim-lsp', { 'on': [] }
Plug 'mattn/vim-lsp-settings', { 'on': ['LspInstallServer', 'LspManageServers'] }
Plug 'hrsh7th/vim-vsnip', {'on': []}
Plug 'hrsh7th/vim-vsnip-integ', {'on': []}
Plug 'puremourning/vimspector', { 'on': ['VimspectorInstall'] }
Plug 'junegunn/fzf', { 'do': { ->fzf#install() } }
Plug 'junegunn/fzf.vim', { 'on': ['Files', 'Buffers', 'Colors', 'Lines', 'BLines', 'History', 'Commands'] }
Plug 'dyng/ctrlsf.vim', { 'on': ['CtrlSF'] }
Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle'] }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle'] }
Plug 'easymotion/vim-easymotion', { 'on': ['<Plug>(easymotion-overwin-line)', '<Plug>(easymotion-overwin-w)', '<Plug>(easymotion-bd-jk)', '<Plug>(easymotion-bd-w)'] }
Plug 'mbbill/undotree', { 'on': ['UndotreeToggle'] }
Plug 'tpope/vim-fugitive', { 'on': ['G'] }
Plug 'voldikss/vim-floaterm', { 'on': ['FloatermNew', 'FloatermToggle'] }
Plug 'thinca/vim-quickrun', { 'on': ['QuickRun'] }
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
call plug#end()

augroup VimPolyglot
  autocmd!
  autocmd BufReadPost * call plug#load('vim-polyglot')
    \| autocmd! VimPolyglot
augroup END

augroup VimDevIcons
  autocmd!
  autocmd BufReadPost * call plug#load('vim-devicons')
    \| autocmd! VimDevIcons
augroup END

augroup Gruvbox
  autocmd!
  autocmd BufReadPost * call plug#load('gruvbox')
    \| autocmd! Gruvbox
    \| colorscheme gruvbox
augroup END

augroup VimAirLine
  autocmd!
  autocmd BufReadPost * call plug#load('vim-airline')
    \| autocmd! VimAirLine
    \| let g:airline_extensions=['branch', 'tabline', 'ale']
augroup END

augroup VimMatchUp
  autocmd!
  autocmd BufReadPost * call plug#load('vim-matchup')
    \| autocmd! VimMatchUp
augroup END

augroup IndentLine
  autocmd!
  autocmd BufReadPost * call plug#load('indentLine')
    \| autocmd! IndentLine
    \| let g:indentLine_char_list=['â”‚']
    \| IndentLinesEnable
augroup END

augroup AutoPairs
  autocmd!
  autocmd InsertEnter * call plug#load('auto-pairs')
    \| autocmd! AutoPairs
    \| call autopairs#AutoPairsTryInit()
augroup END

augroup Rainbow
  autocmd!
  autocmd InsertEnter * call plug#load('rainbow')
    \| autocmd! Rainbow
    \| call rainbow_main#toggle()
augroup END

augroup VimCommentary
  autocmd!
  autocmd BufReadPost * call plug#load('vim-commentary')
    \| autocmd! VimCommentary
augroup END

augroup VimHighlightedYank
  autocmd!
  autocmd BufReadPost * call plug#load('vim-highlightedyank')
    \| autocmd! VimHighlightedYank
    \| let g:highlightedyank_highlight_duration=2400
augroup END

augroup VimBetterWhitespace
  autocmd!
  autocmd BufReadPost * call plug#load('vim-better-whitespace')
    \| autocmd! VimBetterWhitespace
augroup END

augroup VimGitGutter
  autocmd!
  autocmd bufreadpost * call plug#load('vim-gitgutter')
    \| autocmd! VimGitGutter
    \| call gitgutter#enable()
augroup end

augroup ContextVim
  autocmd!
  autocmd bufreadpost * call plug#load('context.vim')
    \| autocmd! ContextVim
augroup end

augroup ALE
  autocmd!
  autocmd bufreadpost * call plug#load('ale')
    \| autocmd! ALE
augroup end

augroup VimSneak
  autocmd!
  autocmd bufreadpost * call plug#load('vim-sneak')
    \| autocmd! VimSneak
augroup end

augroup VimSurround
  autocmd!
  autocmd bufreadpost * call plug#load('vim-surround')
    \| autocmd! VimSurround
augroup end

augroup VimCSSColor
  autocmd!
  autocmd bufreadpre * call plug#load('vim-css-color')
    \| autocmd! VimCSSColor
augroup end

imap <expr><tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : pumvisible() ? "\<C-n>" : "\<Tab>"
smap <expr><tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : pumvisible() ? "\<C-n>" : "\<Tab>"
imap <expr><s-tab> vsnip#available(1) ? '<Plug>(vsnip-jump-prev)' : pumvisible() ? "\<C-p>" : "\<S-Tab>"
smap <expr><s-tab> vsnip#available(1) ? '<Plug>(vsnip-jump-prev)' : pumvisible() ? "\<C-p>" : "\<S-Tab>"
let g:lsp_diagnostics_enabled=0
augroup AsyncompleteVim
  autocmd!
  autocmd insertenter * call plug#load('asyncomplete.vim', 'asyncomplete-buffer.vim', 'asyncomplete-file.vim', 'asyncomplete-lsp.vim', 'vim-lsp', 'vim-vsnip', 'vim-vsnip-integ')
    \| autocmd! AsyncompleteVim
    \| call asyncomplete#enable_for_buffer()
    \| call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({ 'name': 'buffer', 'allowlist': ['*'], 'blocklist': ['go'], 'completor': function('asyncomplete#sources#buffer#completor'), 'config': { 'max_buffer_size': 100000 } }))
    \| call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({ 'name': 'file', 'allowlist': ['*'], 'priority': 10, 'completor': function('asyncomplete#sources#file#completor') }))
    \| call lsp#enable()
    \| if executable('clangd')|call lsp#register_server({ 'name': 'clangd', 'cmd': { server_info -> ['clangd', '--background-index', '--clang-tidy'] }, 'whitelist': ['c', 'cpp'] })|endif
    \| if executable('pylsp')|call lsp#register_server({ 'name': 'pylsp', 'cmd': { server_info -> ['pylsp'] }, 'whitelist': ['python'] })|endif
augroup end
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc')|setlocal tagfunc=lsp#tagfunc|endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> K <plug>(lsp-hover)
  nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
  nnoremap <buffer> <expr><c-b> lsp#scroll(-4)
  let g:lsp_format_sync_timeout=1000
  autocmd! bufwritepre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
  autocmd!
  autocmd user lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup end

let g:fzf_layout={ 'down': '30%' }
nnoremap <c-x><c-f> <cmd>Files<cr>
nnoremap <c-x><c-b> <cmd>Buffers<cr>
nnoremap <c-x><c-w> <cmd>Rg<cr>
nnoremap <c-s> <cmd>BLines<cr>
nnoremap <c-x><c-r> <cmd>History<cr>
nnoremap <leader><leader> <cmd>Commands<cr>
let g:NERDTreeWinSize=20
let g:NERDTreeShowHidden=1
nnoremap <f1> <cmd>NERDTreeToggle<cr>
let g:EasyMotion_do_mapping=0
nmap <leader>gl <Plug>(easymotion-bd-jk)
nmap <leader>gw <Plug>(easymotion-bd-w)
nnoremap <leader>tu <cmd>UndotreeToggle<cr>
let g:floaterm_wintype='split'
let g:floaterm_height=0.25
let g:floaterm_titleposition='center'
nnoremap <leader>tt <cmd>FloatermNew<cr>
tnoremap <leader>tt <c-\><c-n><cmd>FloatermKill<cr>
nnoremap <silent><leader> :<c-u>WhichKey '\'<CR>
nnoremap <silent><localleader> :<c-u>WhichKey '<Space>'<CR>
let g:vimspector_enable_mappings='VISUAL_STUDIO'
